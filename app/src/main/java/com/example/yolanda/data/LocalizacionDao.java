package com.example.yolanda.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.yolanda.data.Localizacion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCALIZACION".
*/
public class LocalizacionDao extends AbstractDao<Localizacion, Long> {

    public static final String TABLENAME = "LOCALIZACION";

    /**
     * Properties of entity Localizacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property LimSouth = new Property(2, Long.class, "limSouth", false, "LIM_SOUTH");
        public final static Property LimEast = new Property(3, Long.class, "limEast", false, "LIM_EAST");
        public final static Property LimNorth = new Property(4, Long.class, "limNorth", false, "LIM_NORTH");
        public final static Property LimWest = new Property(5, Long.class, "limWest", false, "LIM_WEST");
        public final static Property Lat = new Property(6, Long.class, "lat", false, "LAT");
        public final static Property Lng = new Property(7, Long.class, "lng", false, "LNG");
    };


    public LocalizacionDao(DaoConfig config) {
        super(config);
    }
    
    public LocalizacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCALIZACION\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LIM_SOUTH\" INTEGER," + // 2: limSouth
                "\"LIM_EAST\" INTEGER," + // 3: limEast
                "\"LIM_NORTH\" INTEGER," + // 4: limNorth
                "\"LIM_WEST\" INTEGER," + // 5: limWest
                "\"LAT\" INTEGER," + // 6: lat
                "\"LNG\" INTEGER);"); // 7: lng
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCALIZACION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Localizacion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long limSouth = entity.getLimSouth();
        if (limSouth != null) {
            stmt.bindLong(3, limSouth);
        }
 
        Long limEast = entity.getLimEast();
        if (limEast != null) {
            stmt.bindLong(4, limEast);
        }
 
        Long limNorth = entity.getLimNorth();
        if (limNorth != null) {
            stmt.bindLong(5, limNorth);
        }
 
        Long limWest = entity.getLimWest();
        if (limWest != null) {
            stmt.bindLong(6, limWest);
        }
 
        Long lat = entity.getLat();
        if (lat != null) {
            stmt.bindLong(7, lat);
        }
 
        Long lng = entity.getLng();
        if (lng != null) {
            stmt.bindLong(8, lng);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Localizacion readEntity(Cursor cursor, int offset) {
        Localizacion entity = new Localizacion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // limSouth
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // limEast
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // limNorth
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // limWest
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // lng
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Localizacion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLimSouth(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLimEast(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLimNorth(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLimWest(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLng(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Localizacion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Localizacion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
